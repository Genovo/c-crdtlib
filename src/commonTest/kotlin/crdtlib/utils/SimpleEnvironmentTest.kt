package crdtlib.test

import crdtlib.utils.DCId
import crdtlib.utils.SimpleEnvironment
import crdtlib.utils.Timestamp
import crdtlib.utils.VersionVector
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertTrue

/**
* Represents a test suite for SimpleEnvironment.
**/
class SimpleEnvironmentTest {

    /**
    * This test evaluates that the first timestamp generated by an empty environment has the good
    * datacenter id (the one associated with the environment) and a count equals to 1.
    **/
    @Test
    fun emptyGenerateTS() {
        val id = DCId("dcid")
        val dc = SimpleEnvironment(id)

        val ts = dc.getNewTimestamp()

        assertEquals(Timestamp(id, 1), ts)
    }

    /**
    * This test evaluates that the current state associated with an empty environment is an empty
    * version vector.
    **/
    @Test
    fun emptyCurrentState() {
        val id = DCId("dcid")
        val dc = SimpleEnvironment(id)
        val emptyVV = VersionVector()

        val vv = dc.getCurrentState()

        assertTrue(vv.isSmallerOrEquals(emptyVV))
        assertTrue(emptyVV.isSmallerOrEquals(vv))
    }

    /**
    * This test evaluates that after updating the environment with a local timestamp, the next
    * generated timestamp has a datacenter id equals to the one associated with the environment and
    * a count equals to the update timestamp count plus 1.
    **/
    @Test
    fun updateTSLocalIdGenerateTS() {
        val id = DCId("dcid")
        val dc = SimpleEnvironment(id)

        dc.updateStateTS(Timestamp(id, 7))
        val ts = dc.getNewTimestamp()

        assertEquals(Timestamp(id, 8), ts)
    }

    /**
    * This test evaluates that after updating the environment with a foreign timestamp, the next
    * generated timestamp has a datacenter id equals to the one associated with the environment and
    * a count equals to the update timestamp count plus 1.
    **/
    @Test
    fun updateTSForeignIdGenerateTS() {
        val id1 = DCId("dcid1")
        val id2 = DCId("dcid2")
        val dc = SimpleEnvironment(id1)

        dc.updateStateTS(Timestamp(id2, 4))
        val ts = dc.getNewTimestamp()

        assertEquals(Timestamp(id1, 5), ts)
    }

    /**
    * This test evaluates that after updating the environment with a foreign and a local timestamp,
    * the next generated timestamp has a datacenter id equals to the one associated with the
    * environment and a count equals to the max of update timestamp counts plus 1.
    **/
    @Test
    fun updateTSLocalAndForeignIdsGenerateTS() {
        val id1 = DCId("dcid1")
        val id2 = DCId("dcid2")
        val dc = SimpleEnvironment(id1)

        dc.updateStateTS(Timestamp(id2, 6))
        dc.updateStateTS(Timestamp(id1, 5))
        val ts = dc.getNewTimestamp()

        assertEquals(Timestamp(id1, 7), ts)
    }

    /**
    * This test evaluates that after updating the environment with a local timestamp, the current
    * state associated with the environment is a version vector containing the update timestamp.
    **/
    @Test
    fun updateTSLocalIdCurrentState() {
        val id = DCId("dcid")
        val dc = SimpleEnvironment(id)
        val ts = Timestamp(id, 7)
        val cmpVV = VersionVector()
        cmpVV.addTS(ts)

        dc.updateStateTS(ts)
        val vv = dc.getCurrentState()

        assertTrue(vv.isSmallerOrEquals(cmpVV))
        assertTrue(cmpVV.isSmallerOrEquals(vv))
    }

    /**
    * This test evaluates that after updating the environment with a foreign timestamp, the current
    * state associated with the environment is a version vector containing the update timestamp.
    **/
    @Test
    fun updateTSForeignIdsCurrentState() {
        val id1 = DCId("dcid1")
        val id2 = DCId("dcid2")
        val dc = SimpleEnvironment(id1)
        val ts = Timestamp(id2, 5)
        val cmpVV = VersionVector()
        cmpVV.addTS(ts)

        dc.updateStateTS(ts)
        val vv = dc.getCurrentState()

        assertTrue(vv.isSmallerOrEquals(cmpVV))
        assertTrue(cmpVV.isSmallerOrEquals(vv))
    }

    /**
    * This test evaluates that after updating the environment with a foreign and a local timestamp,
    * the current state associated with the environment is a version vector containing the update
    * timestamps.
    **/
    @Test
    fun updateTSLocalAndForeignIdsCurrentState() {
        val id1 = DCId("dcid1")
        val id2 = DCId("dcid2")
        val dc = SimpleEnvironment(id1)
        val ts1 = Timestamp(id1, 7)
        val ts2 = Timestamp(id2, 6)
        val cmpVV = VersionVector()
        cmpVV.addTS(ts1)
        cmpVV.addTS(ts2)

        dc.updateStateTS(ts1)
        dc.updateStateTS(ts2)
        val vv = dc.getCurrentState()

        assertTrue(vv.isSmallerOrEquals(cmpVV))
        assertTrue(cmpVV.isSmallerOrEquals(vv))
    }

    /**
    * This test evaluates that after updating the environment with a version vector, the next
    * generated timestamp has a datacenter id equals to the one associated with the environment and
    * a count equals to the max value in the update version vector plus 1.
    **/
    @Test
    fun updateVVGenerateTS() {
        val id1 = DCId("dcid1")
        val id2 = DCId("dcid2")
        val dc = SimpleEnvironment(id1)
        val ts1 = Timestamp(id1, 6)
        val ts2 = Timestamp(id2, 7)
        val vv = VersionVector()
        vv.addTS(ts1)
        vv.addTS(ts2)

        dc.updateStateVV(vv)
        val ts3 = dc.getNewTimestamp()

        assertEquals(Timestamp(id1, 8), ts3)
    }

    /**
    * This test evaluates that after updating the environment with a version vector, the current
    * state associated to the environment equals to the update version vector.
    **/
    @Test
    fun updateVVCurrentState() {
        val id1 = DCId("dcid1")
        val id2 = DCId("dcid2")
        val dc = SimpleEnvironment(id1)
        val ts1 = Timestamp(id1, 6)
        val ts2 = Timestamp(id2, 5)
        val vv1 = VersionVector()
        vv1.addTS(ts1)
        vv1.addTS(ts2)

        dc.updateStateVV(vv1)
        val vv2 = dc.getCurrentState()

        assertTrue(vv1.isSmallerOrEquals(vv2))
        assertTrue(vv2.isSmallerOrEquals(vv1))
    }
}
